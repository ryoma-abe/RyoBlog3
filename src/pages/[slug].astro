---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { formatDate } from "../lib/utils/utils";
import { getTagColor } from "../lib/utils/tags";
import { getAllPosts, getSlugFromId } from "../lib/utils/posts";

// ページのパスを生成
export async function getStaticPaths() {
  const allPosts = await getAllPosts();

  return allPosts.map((entry) => ({
    params: {
      slug: getSlugFromId(entry.id),
    },
    props: { entry },
  }));
}

// ページのコンテンツを取得
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <article class="prose dark:prose-invert lg:prose-lg mx-auto">
      <div class="mb-8">
        <h1 class="text-4xl font-bold mb-2">{entry.data.title}</h1>
        <div class="flex items-center justify-between mb-8">
          <div class="flex gap-2 flex-wrap">
            {
              entry.data.tags.map((tag) => (
                <span
                  class={`text-sm px-3 py-1 rounded-full ${getTagColor(tag)} text-white`}
                >
                  {tag}
                </span>
              ))
            }
          </div>
          <time class="text-gray-500">
            {
              formatDate(
                entry.data.date instanceof Date
                  ? entry.data.date.toISOString()
                  : String(entry.data.date)
              )
            }
          </time>
        </div>
        {
          entry.data.description && (
            <p class="text-xl text-gray-600 mt-4">{entry.data.description}</p>
          )
        }
      </div>

      <div class="markdown-content">
        <Content />
      </div>

      <div class="mt-12 pt-6 border-t flex justify-between">
        <a href="/" class="text-blue-500 hover:underline">← トップページ</a>
        <a href="/blog/page/1" class="text-blue-500 hover:underline"
          >すべての記事 →</a
        >
      </div>
    </article>
  </main>
</Layout>
<style>
  article.prose {
    line-height: 1.8;
    font-size: 1rem;
    color: #e5e7eb; /* tailwindのtext-gray-200くらい */
  }

  article.prose h1,
  article.prose h2,
  article.prose h3,
  article.prose h4 {
    font-weight: bold;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  article.prose h1 {
    font-size: 2rem;
  }
  article.prose h2 {
    font-size: 1.5rem;
  }
  article.prose h3 {
    font-size: 1.25rem;
  }
  article.prose h4 {
    font-size: 1.125rem;
  }

  article.prose p {
    margin: 1rem 0;
  }

  article.prose ul,
  article.prose ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  article.prose code {
    background-color: #1f2937; /* ダークグレー */
    color: #facc15; /* 黄色系 */
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: Menlo, Monaco, Consolas, monospace;
  }

  article.prose pre {
    background-color: #0f172a;
    color: #e2e8f0;
    padding: 1rem;
    overflow-x: auto;
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }

  article.prose blockquote {
    border-left: 4px solid #60a5fa; /* 青系 */
    padding-left: 1rem;
    margin: 1.5rem 0;
    color: #9ca3af;
    font-style: italic;
  }

  article.prose table {
    border-collapse: collapse;
    margin: 2rem 0;
    width: 100%;
  }

  article.prose th,
  article.prose td {
    border: 1px solid #374151;
    padding: 0.5rem 1rem;
    text-align: left;
  }

  article.prose img {
    max-width: 100%;
    border-radius: 0.5rem;
    margin: 1rem 0;
  }
</style>
