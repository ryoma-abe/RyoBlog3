---
import Header from "../components/common/Header.astro";
import Footer from "../components/common/Footer.astro";
import { ClientRouter } from "astro:transitions";
import { getPageMeta, normalizePath } from "../lib/utils/meta";
import { isArticlePage, isTagPage } from "../lib/utils/path";
import "../styles/global.css";

// 記事データ（propsから受け取る場合）
const { articleData } = Astro.props;

// 正規化されたパス（末尾スラッシュを除去）
const pathname = normalizePath(Astro.url.pathname);

// メタ情報の取得（記事データがある場合は優先）
const meta = articleData
  ? {
      title: `${articleData.title} | RyoBlog`,
      description: articleData.description || "",
      keywords: articleData.tags || [],
    }
  : getPageMeta(pathname);

// h1見出しに使うタイトル（" | RyoBlog" 除去）
const pageHeadingTitle = Astro.props.title || meta.title.split(" | ")[0];

// メタタイトル（タグページはprops.titleを優先）
const metaTitle =
  isTagPage(pathname) && Astro.props.title ? Astro.props.title : meta.title;

const description = Astro.props.description ?? meta.description;
const keywords = Astro.props.keywords ?? meta.keywords;
const keywordsString = Array.isArray(keywords) ? keywords.join(", ") : keywords;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{metaTitle}</title>
    <ClientRouter />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywordsString} />
    <meta property="og:title" content={metaTitle} />
    <meta property="og:description" content={description} />
    <meta
      property="og:type"
      content={isArticlePage(pathname) ? "article" : "website"}
    />
    <meta
      property="og:url"
      content={`https://web-ryoma.conohawing.com${Astro.url.pathname}`}
    />
    <meta
      property="og:image"
      content="https://web-ryoma.conohawing.com/images/ogp.png"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <link
      rel="canonical"
      href={`https://web-ryoma.conohawing.com${Astro.url.pathname}`}
    />
    <link rel="icon" href="/favicon.png" type="image/png" />

    <!-- ダークモード設定 -->
    <script is:inline>
      const initTheme = () => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
      };
      initTheme();
      document.addEventListener("astro:page-load", initTheme);
    </script>

    <!-- コードブロックのコピー機能 -->
    <script is:inline>
      const initCodeCopyButtons = () => {
        document.querySelectorAll("pre").forEach((pre) => {
          if (pre.parentNode.classList.contains("code-block-wrapper")) return;

          const wrapper = document.createElement("div");
          wrapper.className = "code-block-wrapper relative";
          pre.parentNode.insertBefore(wrapper, pre);
          wrapper.appendChild(pre);

          const copyButton = document.createElement("button");
          copyButton.className =
            "copy-button absolute top-2 right-2 bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-70 hover:opacity-100 transition-opacity";
          copyButton.textContent = "コピー";
          wrapper.appendChild(copyButton);

          copyButton.addEventListener("click", () => {
            const code = pre.querySelector("code");
            const text = code ? code.innerText : pre.innerText;
            navigator.clipboard
              .writeText(text)
              .then(() => {
                copyButton.textContent = "コピー完了！";
                setTimeout(() => {
                  copyButton.textContent = "コピー";
                }, 2000);
              })
              .catch((err) => {
                console.error("コピーに失敗しました:", err);
                copyButton.textContent = "コピー失敗";
                setTimeout(() => {
                  copyButton.textContent = "コピー";
                }, 2000);
              });
          });
        });
      };

      document.addEventListener("DOMContentLoaded", initCodeCopyButtons);
      document.addEventListener("astro:page-load", initCodeCopyButtons);
    </script>
  </head>
  <body class="bg-primary text-primary">
    <Header />
    <main>
      <div class="container mx-auto py-20 px-5">
        {
          !isArticlePage(pathname) && !isTagPage(pathname) && (
            <h1 class="text-4xl font-bold text-center">{pageHeadingTitle}</h1>
          )
        }
        <slot />
      </div>
    </main>
    <Footer />
  </body>
</html>
