<button id="theme-toggle" class="theme-toggle" aria-label="テーマ切り替え">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="icon-sun"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="icon-moon"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 9999px;
    transition: background-color 0.2s ease;
  }

  .theme-toggle:hover {
    background-color: rgba(128, 128, 128, 0.1);
  }

  .theme-toggle svg {
    width: 1.5rem;
    height: 1.5rem;
    transition:
      transform 0.2s ease,
      opacity 0.2s ease;
  }

  .icon-sun {
    opacity: 0;
    transform: scale(0.7);
    position: absolute;
  }

  .icon-moon {
    opacity: 1;
    transform: scale(1);
  }

  /* ダークモード時のスタイル */
  :global(.dark) .icon-sun {
    opacity: 1;
    transform: scale(1);
  }

  :global(.dark) .icon-moon {
    opacity: 0;
    transform: scale(0.7);
  }
</style>

<script>
  // テーマの保存と取得のためのユーティリティ
  const themeStorage = {
    getTheme: (): string | null => localStorage.getItem("theme"),
    setTheme: (theme: string): void => localStorage.setItem("theme", theme),
  };

  // システムのカラースキーム設定を監視
  const mediaQuery: MediaQueryList = window.matchMedia(
    "(prefers-color-scheme: dark)"
  );

  // テーマ切り替えの初期化処理
  const initThemeToggle = (): void => {
    const toggle: HTMLElement | null = document.getElementById("theme-toggle");

    // ローカルストレージからテーマを取得、なければシステム設定を使用
    const savedTheme: string | null = themeStorage.getTheme();
    if (savedTheme) {
      document.documentElement.classList.toggle("dark", savedTheme === "dark");
    } else {
      const systemIsDark: boolean = mediaQuery.matches;
      document.documentElement.classList.toggle("dark", systemIsDark);
      themeStorage.setTheme(systemIsDark ? "dark" : "light");
    }

    // テーマ切り替えの処理
    toggle?.addEventListener("click", (): void => {
      const isDark: boolean = document.documentElement.classList.toggle("dark");
      themeStorage.setTheme(isDark ? "dark" : "light");
    });

    // システム設定の変更を監視
    mediaQuery.addEventListener("change", (e: MediaQueryListEvent): void => {
      // ユーザーが手動で設定していない場合のみシステム設定に従う
      if (!themeStorage.getTheme()) {
        document.documentElement.classList.toggle("dark", e.matches);
      }
    });
  };

  // 通常のページロード時
  document.addEventListener("DOMContentLoaded", initThemeToggle);

  // Astroのページ遷移後
  document.addEventListener("astro:page-load", initThemeToggle);
</script>
