---
import { getSortedPosts } from "../lib/blog";
import { formatDate } from "../lib/utils";
import { getTagColor } from "../lib/tags";

const POSTS_PER_PAGE = 12;
const currentPage = Number(Astro.url.searchParams.get("page") || "1");
const sortedPosts = await getSortedPosts();
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const start = (currentPage - 1) * POSTS_PER_PAGE;
const end = start + POSTS_PER_PAGE;
const paginatedPosts = sortedPosts.slice(start, end);
---

<!-- 記事グリッド -->
<div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6 mt-15">
  {
    paginatedPosts.map((post) => {
      return (
        <div class="bg-slate-800 rounded-lg overflow-hidden shadow-lg">
          <a href={`/${post.slug}`}>
            <div
              class={`h-48 p-6 flex items-center justify-center text-white text-center ${getTagColor(post.data.tags?.[0] || "その他")}`}
            >
              <h3>{post.data.title}</h3>
            </div>
            <div class="p-4">
              <div class="flex justify-between items-center mb-2">
                <div class="flex gap-2 flex-wrap">
                  {post.data.tags && post.data.tags.length > 0 ? (
                    post.data.tags.map((tag) => {
                      const tagColor = getTagColor(tag);
                      return (
                        <span
                          class={`text-sm px-3 py-1 rounded-full ${tagColor} text-white`}
                        >
                          {tag}
                        </span>
                      );
                    })
                  ) : (
                    <span class="text-sm px-3 py-1 rounded-full bg-gray-500 text-white">
                      その他
                    </span>
                  )}
                </div>
                <span class="text-sm text-gray-400">
                  {formatDate(post.data.date)}
                </span>
              </div>
              {post.data.description && (
                <p class="text-gray-300 text-sm mb-4">
                  {post.data.description}
                </p>
              )}
            </div>
          </a>
        </div>
      );
    })
  }
</div>

<!-- ページネーション -->
{
  totalPages > 1 && (
    <div class="flex justify-center gap-2 mt-10">
      {Array.from({ length: totalPages }, (_, i) => {
        const pageNum = i + 1;
        const isCurrent = pageNum === currentPage;
        return (
          <a
            href={`?page=${pageNum}`}
            class={`px-4 py-2 rounded ${isCurrent ? "bg-white text-black font-bold" : "bg-gray-700 text-white hover:bg-gray-600"}`}
          >
            {pageNum}
          </a>
        );
      })}
    </div>
  )
}
